// Code generated by protoc-gen-go.
// source: models.proto
// DO NOT EDIT!

package datamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FileDeliverTask struct {
	TaskName         *string  `protobuf:"bytes,1,req,name=TaskName" json:"TaskName,omitempty"`
	Target           []string `protobuf:"bytes,2,rep,name=Target" json:"Target,omitempty"`
	ImageDescJson    []byte   `protobuf:"bytes,3,req,name=ImageDescJson" json:"ImageDescJson,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FileDeliverTask) Reset()                    { *m = FileDeliverTask{} }
func (m *FileDeliverTask) String() string            { return proto.CompactTextString(m) }
func (*FileDeliverTask) ProtoMessage()               {}
func (*FileDeliverTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FileDeliverTask) GetTaskName() string {
	if m != nil && m.TaskName != nil {
		return *m.TaskName
	}
	return ""
}

func (m *FileDeliverTask) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *FileDeliverTask) GetImageDescJson() []byte {
	if m != nil {
		return m.ImageDescJson
	}
	return nil
}

type MessageAck struct {
	IsSuccess        *bool   `protobuf:"varint,1,req,name=IsSuccess" json:"IsSuccess,omitempty"`
	ErrMsg           *string `protobuf:"bytes,2,opt,name=ErrMsg" json:"ErrMsg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MessageAck) Reset()                    { *m = MessageAck{} }
func (m *MessageAck) String() string            { return proto.CompactTextString(m) }
func (*MessageAck) ProtoMessage()               {}
func (*MessageAck) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *MessageAck) GetIsSuccess() bool {
	if m != nil && m.IsSuccess != nil {
		return *m.IsSuccess
	}
	return false
}

func (m *MessageAck) GetErrMsg() string {
	if m != nil && m.ErrMsg != nil {
		return *m.ErrMsg
	}
	return ""
}

type KeepAlive struct {
	NodeType         *uint32 `protobuf:"varint,1,req,name=NodeType" json:"NodeType,omitempty"`
	NodeId           *string `protobuf:"bytes,2,req,name=NodeId" json:"NodeId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeepAlive) Reset()                    { *m = KeepAlive{} }
func (m *KeepAlive) String() string            { return proto.CompactTextString(m) }
func (*KeepAlive) ProtoMessage()               {}
func (*KeepAlive) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *KeepAlive) GetNodeType() uint32 {
	if m != nil && m.NodeType != nil {
		return *m.NodeType
	}
	return 0
}

func (m *KeepAlive) GetNodeId() string {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return ""
}

type StartSendFile struct {
	TaskName         *string `protobuf:"bytes,1,req,name=TaskName" json:"TaskName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StartSendFile) Reset()                    { *m = StartSendFile{} }
func (m *StartSendFile) String() string            { return proto.CompactTextString(m) }
func (*StartSendFile) ProtoMessage()               {}
func (*StartSendFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *StartSendFile) GetTaskName() string {
	if m != nil && m.TaskName != nil {
		return *m.TaskName
	}
	return ""
}

type FilePackageHeader struct {
	FileName         *string `protobuf:"bytes,1,req,name=FileName" json:"FileName,omitempty"`
	RelPath          *string `protobuf:"bytes,2,req,name=RelPath" json:"RelPath,omitempty"`
	HashCode         []byte  `protobuf:"bytes,3,req,name=HashCode" json:"HashCode,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FilePackageHeader) Reset()                    { *m = FilePackageHeader{} }
func (m *FilePackageHeader) String() string            { return proto.CompactTextString(m) }
func (*FilePackageHeader) ProtoMessage()               {}
func (*FilePackageHeader) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *FilePackageHeader) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *FilePackageHeader) GetRelPath() string {
	if m != nil && m.RelPath != nil {
		return *m.RelPath
	}
	return ""
}

func (m *FilePackageHeader) GetHashCode() []byte {
	if m != nil {
		return m.HashCode
	}
	return nil
}

func init() {
	proto.RegisterType((*FileDeliverTask)(nil), "datamodel.FileDeliverTask")
	proto.RegisterType((*MessageAck)(nil), "datamodel.MessageAck")
	proto.RegisterType((*KeepAlive)(nil), "datamodel.KeepAlive")
	proto.RegisterType((*StartSendFile)(nil), "datamodel.StartSendFile")
	proto.RegisterType((*FilePackageHeader)(nil), "datamodel.FilePackageHeader")
}

var fileDescriptor1 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x8f, 0xdf, 0x6a, 0xf2, 0x40,
	0x10, 0xc5, 0x51, 0xe1, 0xfb, 0xdc, 0xc1, 0xd4, 0x1a, 0x28, 0xe4, 0xd2, 0xee, 0x95, 0x37, 0x6d,
	0x9f, 0x41, 0xfa, 0x87, 0xc4, 0xa2, 0x48, 0x93, 0x17, 0x18, 0x76, 0x87, 0x28, 0x49, 0x4c, 0xd8,
	0xd9, 0x16, 0xfa, 0xf6, 0x9d, 0x31, 0x37, 0x85, 0x5e, 0x2d, 0x7b, 0xe6, 0xcc, 0x39, 0xbf, 0x81,
	0x45, 0xd7, 0x7b, 0x6a, 0xf9, 0x71, 0x08, 0x7d, 0xec, 0x53, 0xe3, 0x31, 0xe2, 0x55, 0xb1, 0x3b,
	0x58, 0xbe, 0x9d, 0x5b, 0x7a, 0xa1, 0xf6, 0xfc, 0x45, 0xa1, 0x42, 0x6e, 0xd2, 0x5b, 0x98, 0xeb,
	0x7b, 0xc0, 0x8e, 0xb2, 0xc9, 0x7a, 0xba, 0x31, 0xe9, 0x0d, 0xfc, 0xab, 0x30, 0xd4, 0x14, 0xb3,
	0xe9, 0x7a, 0x26, 0xff, 0x3b, 0x48, 0x8a, 0x0e, 0x6b, 0xd9, 0x62, 0xb7, 0xe3, 0xfe, 0x92, 0xcd,
	0xc4, 0xb6, 0xb0, 0x4f, 0x00, 0x7b, 0x62, 0x96, 0xc1, 0xd6, 0x35, 0xe9, 0x0a, 0x4c, 0xc1, 0xe5,
	0xa7, 0x73, 0x22, 0x5d, 0x73, 0xe6, 0x9a, 0xf3, 0x1a, 0xc2, 0x9e, 0x6b, 0xc9, 0x99, 0x6c, 0x8c,
	0x7d, 0x00, 0xf3, 0x4e, 0x34, 0x6c, 0xb5, 0x5b, 0x6b, 0x0f, 0x82, 0x54, 0x7d, 0x0f, 0x63, 0x6d,
	0xa2, 0x76, 0x55, 0x0a, 0x2f, 0x76, 0xc1, 0xb0, 0xf7, 0x90, 0x94, 0x11, 0x43, 0x2c, 0xe9, 0xe2,
	0x15, 0xfa, 0x2f, 0xa9, 0xcd, 0x61, 0xa5, 0x93, 0x23, 0xba, 0x46, 0x30, 0x72, 0x42, 0x4f, 0x41,
	0x6d, 0x2a, 0xfe, 0x3a, 0x68, 0x09, 0xff, 0x3f, 0xa8, 0x3d, 0x62, 0x3c, 0x8d, 0xd1, 0x6a, 0xc9,
	0x91, 0x4f, 0xcf, 0x52, 0x37, 0x1e, 0xf3, 0x13, 0x00, 0x00, 0xff, 0xff, 0xda, 0x1c, 0x14, 0xe2,
	0x32, 0x01, 0x00, 0x00,
}
