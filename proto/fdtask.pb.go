// Code generated by protoc-gen-go.
// source: proto/fdtask.proto
// DO NOT EDIT!

package datamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FileDeliverTask struct {
	TaskName         *string  `protobuf:"bytes,1,req,name=TaskName" json:"TaskName,omitempty"`
	Target           []string `protobuf:"bytes,2,rep,name=Target" json:"Target,omitempty"`
	ImageDescJson    []byte   `protobuf:"bytes,3,req,name=ImageDescJson" json:"ImageDescJson,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FileDeliverTask) Reset()                    { *m = FileDeliverTask{} }
func (m *FileDeliverTask) String() string            { return proto.CompactTextString(m) }
func (*FileDeliverTask) ProtoMessage()               {}
func (*FileDeliverTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FileDeliverTask) GetTaskName() string {
	if m != nil && m.TaskName != nil {
		return *m.TaskName
	}
	return ""
}

func (m *FileDeliverTask) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *FileDeliverTask) GetImageDescJson() []byte {
	if m != nil {
		return m.ImageDescJson
	}
	return nil
}

type MessageAck struct {
	IsSuccess        *bool   `protobuf:"varint,1,req,name=IsSuccess" json:"IsSuccess,omitempty"`
	ErrMsg           *string `protobuf:"bytes,2,opt,name=ErrMsg" json:"ErrMsg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MessageAck) Reset()                    { *m = MessageAck{} }
func (m *MessageAck) String() string            { return proto.CompactTextString(m) }
func (*MessageAck) ProtoMessage()               {}
func (*MessageAck) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *MessageAck) GetIsSuccess() bool {
	if m != nil && m.IsSuccess != nil {
		return *m.IsSuccess
	}
	return false
}

func (m *MessageAck) GetErrMsg() string {
	if m != nil && m.ErrMsg != nil {
		return *m.ErrMsg
	}
	return ""
}

type KeepAlive struct {
	NodeType         *uint32 `protobuf:"varint,1,req,name=NodeType" json:"NodeType,omitempty"`
	NodeId           *string `protobuf:"bytes,2,req,name=NodeId" json:"NodeId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeepAlive) Reset()                    { *m = KeepAlive{} }
func (m *KeepAlive) String() string            { return proto.CompactTextString(m) }
func (*KeepAlive) ProtoMessage()               {}
func (*KeepAlive) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *KeepAlive) GetNodeType() uint32 {
	if m != nil && m.NodeType != nil {
		return *m.NodeType
	}
	return 0
}

func (m *KeepAlive) GetNodeId() string {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return ""
}

func init() {
	proto.RegisterType((*FileDeliverTask)(nil), "datamodel.FileDeliverTask")
	proto.RegisterType((*MessageAck)(nil), "datamodel.MessageAck")
	proto.RegisterType((*KeepAlive)(nil), "datamodel.KeepAlive")
}

var fileDescriptor1 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x24, 0x8e, 0xcd, 0xaa, 0x83, 0x30,
	0x14, 0x84, 0x51, 0xe1, 0x62, 0x0e, 0xd7, 0xfb, 0x13, 0x28, 0xb8, 0x14, 0x57, 0x6e, 0x5a, 0x9f,
	0x41, 0x68, 0x0b, 0x5a, 0x74, 0x53, 0x5f, 0x20, 0x24, 0xa7, 0x22, 0x6a, 0x23, 0x49, 0x5a, 0xe8,
	0xdb, 0xf7, 0xc4, 0xae, 0xc2, 0x4c, 0xbe, 0x33, 0x33, 0xc0, 0x57, 0xa3, 0x9d, 0x2e, 0x6f, 0xca,
	0x09, 0x3b, 0x1d, 0x36, 0xc1, 0x99, 0x12, 0x4e, 0x2c, 0x5a, 0xe1, 0x9c, 0x37, 0xf0, 0x7b, 0x1e,
	0x67, 0x3c, 0xe2, 0x3c, 0x3e, 0xd1, 0xf4, 0xc4, 0xf0, 0x3f, 0x88, 0xfd, 0xdb, 0x89, 0x05, 0xd3,
	0x20, 0x0b, 0x0b, 0xc6, 0x7f, 0xe0, 0xab, 0x17, 0x66, 0x40, 0x97, 0x86, 0x59, 0x44, 0x7a, 0x07,
	0x49, 0xbd, 0x88, 0x81, 0xae, 0xac, 0x6c, 0xac, 0xbe, 0xa7, 0x11, 0x61, 0xdf, 0x79, 0x09, 0xd0,
	0xa2, 0xb5, 0xf4, 0x51, 0xc9, 0x89, 0xff, 0x03, 0xab, 0xed, 0xf5, 0x21, 0x25, 0x59, 0x5b, 0x4e,
	0xec, 0x73, 0x4e, 0xc6, 0xb4, 0x76, 0xa0, 0x9c, 0xa0, 0x60, 0xf9, 0x1e, 0xd8, 0x05, 0x71, 0xad,
	0x7c, 0xb7, 0xaf, 0xed, 0x68, 0x52, 0xff, 0x5a, 0x3f, 0xb5, 0x89, 0xc7, 0xbd, 0x53, 0x2b, 0xc2,
	0x69, 0xc6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x29, 0x3c, 0xfc, 0xcb, 0x00, 0x00, 0x00,
}
